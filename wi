#!/usr/bin/bash

# wifi management shortcuts

dev='wlan0'

_set() {
  sudo ip link set dev $dev $1
}

_scan() {
  if is_up; then
    was_down=false
  else
    was_down=true
    _set up
  fi
  sudo iw dev $dev scan
  if $was_down; then
    _set down
  fi
}

_ssid() {
  _scan | sed -n 's/^[[:space:]]*SSID: //p' | sort | uniq | grep -v '\x00'
}

_dhcpn() {
  sudo dhcpcd -n $dev
}

_dhcpx() {
  sudo dhcpcd -x $dev
}

is_up() {
  [[ -n "$(ip link show $dev up)" ]]
  return $?
}

case $1 in
  st|status)
    sudo wpa_cli status
    echo
    iw dev $dev link
    echo -en '\n        '
    iw dev $dev get power_save
    echo
    ip link show $dev
    ;;

  up|down)
    _set $1
    ;;

  ip|dhcp)
    _dhcpn
    ;;

  rmip|dhcpx)
    _dhcpx
    ;;

  sc|scan)
    _scan | less
    ;;

  ssid)
    _ssid
    ;;

  connect)
    is_up || _set up
    if [[ -n "$2" ]]; then
      sudo iw dev $dev connect "$2"
    else
      IFS=$'\n' ssids=($(_ssid))
      select ssid in ${ssids[@]}; do
        sudo iw dev $dev connect "$ssid"
        break
      done
    fi
    _dhcpn
    ;;

  disconnect)
    _dhcpx
    sudo iw dev $dev disconnect
    _set down
    ;;

  pwr|power|power_save)
    sudo iw dev $dev set power_save $2
    ;;

  rs|restart|stop|start)
    [[ $1 == 'rs' ]] && cmd='restart' || cmd=$1
    sudo systemctl $cmd netctl-auto@$dev.service
    ;;

  *)
    cat <<EOF
usage:  $0 command

  st|status                     : assorted status information
  up|down                       : set up/down
  ip|dhcp                       : DHCP
  rmip|dhcpx                    : release DHCP
  sc|scan                       : scan for networks
  ssid                          : show available SSIDs
  connect [SSID]                : connect to open network
  disconnect                    : release DHCP, disconnect, set down
  pwr|power|power_save {on|off} : set power saving on/off
  rs|restart|stop|start         : manage netctl auto wireless
EOF
    ;;
esac
