#!/usr/bin/env python2

# check torrent integrity
# mostly not written by me


import sys, os, hashlib, StringIO, bencode



### yield pieces from download file(s)

def pieces_generator(info,rootdir):
    piece_length = info['piece length']

    if 'files' in info: # yield pieces from a multi-file torrent
        piece = ""

        for file_info in info['files']:
            #path = os.sep.join([info['name']] + file_info['path'])
            #path = file_info['path'][0]
            path = os.sep.join([rootdir] + file_info['path'])
            print path
            sfile = open(path.decode('UTF-8'), "rb")
            while True:
                piece += sfile.read(piece_length-len(piece))
                if len(piece) != piece_length:
                    sfile.close()
                    break
                yield piece
                piece = ""

        if piece != "":
            yield piece

    else: # yield pieces from a single file torrent
        path = info['name']
        print path
        sfile = open(path.decode('UTF-8'), "rb")
        while True:
            piece = sfile.read(piece_length)
            if not piece:
                sfile.close()
                return
            yield piece



### display error message and exit

def corruption_failure():
    print("found error")
    exit(1)



### main

def main():
    # open torrent file
    torrent_file = open(sys.argv[1], "rb")
    metainfo = bencode.bdecode(torrent_file.read())
    info = metainfo['info']
    pieces = StringIO.StringIO(info['pieces'])

    if len(sys.argv) > 2:
        rootdir = sys.argv[2]
    else:
        rootdir = '.'

    # iterate through pieces
    #for piece in pieces_generator(info):
    for piece in pieces_generator(info,rootdir):
        # compare piece hash with expected hash
        piece_hash = hashlib.sha1(piece).digest()
        if (piece_hash != pieces.read(20)):
            corruption_failure()

    # ensure we've read all pieces 
    if pieces.read():
        corruption_failure()

    print("passed")



if __name__ == "__main__":
    main()
